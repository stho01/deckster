name: Publish

on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  calculate_version:
    name: "Calculate Version"
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
 
  create_nuget: 
    name: "Create NuGet packages"
    runs-on: ubuntu-latest
    needs: [ calculate_version ]
    env:
      SEMVER: ${{ needs.calculate_version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Add nuget sources
        run: |
          dotnet nuget add source `
            --username ${{ github.actor }} `
            --password ${{ secrets.GITHUB_TOKEN }} `
            --store-password-in-clear-text `
            --name github `
            "https://nuget.pkg.github.com/stho01/index.json"
      - name: Pack core nuget package
        run: |
          dotnet pack src/Deckster.Core `
          --configuration Release `
          --output ${{ env.NuGetDirectory }} `
          /p:Version=${{env.SEMVER}}
      - name: Add local temporary nuget source
        run: |
          dotnet nuget add source ${{ env.NuGetDirectory }} --name local_nuget
      - name: Remove core project reference
        run: |
          dotnet remove src/Deckster.Client reference src/Deckster.Client/Deckster.Core.csproj
      - name: Add core nuget package
        run: |
          dotnet add src/Deckster.Client package Deckster.Core --version ${{env.SEMVER}}
      - name: Pack client nuget package
        run: |
          dotnet pack src/Deckster.Client --configuration Release --output ${{ env.NuGetDirectory }} /p:Version=${{env.SEMVER}}
      - name: Upload NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg
  
  validate_nuget:
    name: "Validate NuGet packages"
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      # Install the NuGet validator tool
      - name: Install nuget validator
        run: dotnet tool update -g dotnet-validate --version 0.0.1-preview.304
      # Validate the NuGet package
      - name: Validate package
        run: |
          foreach ($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
            dotnet validate package local $file
          }

  tag_commit:
    name: "Tag commit with next version"
    runs-on: ubuntu-latest
    # Only run this job when pushing to the main branch
    if: github.ref == 'refs/heads/main'
    needs: [ validate_nuget, calculate_version ]
    permissions:
      contents: write
    env:
      SEMVER: ${{ needs.calculate_version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup git user
        run: |
          git config --global user.name "${{ github.actor }}"
      - name: "Set tag"
        run: git tag -a ${{ env.SEMVER }} -m "Release v${{ env.SEMVER }}"
      - name: "Push tag"
        run: git push -u --tags -f
  
  deploy:
    name: "Publish NuGet packages"
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [ validate_nuget ]
    permissions: 
      packages: write
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
      # Add the GitHub NuGet source to the NuGet configuration
      - name: Add nuget source
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/itfas/index.json"
      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach ($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.GITHUB_TOKEN }}" --source "github" --skip-duplicate
          }